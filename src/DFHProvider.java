

import java.math.BigInteger;
import java.security.SecureRandom;

/*
USING 4096-bit group, more info there: ietf.org/rfc/rfc3526.txt

#16

p =   0xFFFFFFFF 0xFFFFFFFF 0xC90FDAA2 0x2168C234 0xC4C6628B 0x80DC1CD1
      0x29024E08 0x8A67CC74 0x020BBEA6 0x3B139B22 0x514A0879 0x8E3404DD
      0xEF9519B3 0xCD3A431B 0x302B0A6D 0xF25F1437 0x4FE1356D 0x6D51C245
      0xE485B576 0x625E7EC6 0xF44C42E9 0xA637ED6B 0x0BFF5CB6 0xF406B7ED
      0xEE386BFB 0x5A899FA5 0xAE9F2411 0x7C4B1FE6 0x49286651 0xECE45B3D
      0xC2007CB8 0xA163BF05 0x98DA4836 0x1C55D39A 0x69163FA8 0xFD24CF5F
      0x83655D23 0xDCA3AD96 0x1C62F356 0x208552BB 0x9ED52907 0x7096966D
      0x670C354E 0x4ABC9804 0xF1746C08 0xCA18217C 0x32905E46 0x2E36CE3B
      0xE39E772C 0x180E8603 0x9B2783A2 0xEC07A28F 0xB5C55DF0 0x6F4C52C9
      0xDE2BCBF6 0x95581718 0x3995497C 0xEA956AE5 0x15D22618 0x98FA0510
      0x15728E5A 0x8AAAC42D 0xAD33170D 0x04507A33 0xA85521AB 0xDF1CBA64
      0xECFB8504 0x58DBEF0A 0x8AEA7157 0x5D060C7D 0xB3970F85 0xA6E1E4C7
      0xABF5AE8C 0xDB0933D7 0x1E8C94E0 0x4A25619D 0xCEE3D226 0x1AD2EE6B
      0xF12FFA06 0xD98A0864 0xD8760273 0x3EC86A64 0x521F2B18 0x177B200C
      0xBBE11757 0x7A615D6C 0x770988C0 0xBAD946E2 0x08E24FA0 0x74E5AB31
      0x43DB5BFC 0xE0FD108E 0x4B82D120 0xA9210801 0x1A723C12 0xA787E6D7
      0x88719A10 0xBDBA5B26 0x99C32718 0x6AF4E23C 0x1A946834 0xB6150BDA
      0x2583E9CA 0x2AD44CE8 0xDBBBC2DB 0x04DE8EF9 0x2E8EFC14 0x1FBECAA6
      0x287C5947 0x4E6BC05D 0x99B2964F 0xA090C3A2 0x233BA186 0x515BE7ED
      0x1F612970 0xCEE2D7AF 0xB81BDD76 0x2170481C 0xD0069127 0xD5B05AA9
      0x93B4EA98 0x8D8FDDC1 0x86FFB7DC 0x90A6C08F 0x4DF435C9 0x34063199
      0xFFFFFFFF 0xFFFFFFFF
g = 2

private key = 8 bytes
 */

public class DFHProvider {
    private final BigInteger p = new BigInteger("1044388881413152506679602719846529545831269060992135009022588756444338172022322690710444046669809783930111585737890362691860127079270495454517218673016928427459146001866885779762982229321192368303346235204368051010309155674155697460347176946394076535157284994895284821633700921811716738972451834979455897010306333468590751358365138782250372269117968985194322444535687415522007151638638141456178420621277822674995027990278673458629544391736919766299005511505446177668154446234882665961680796576903199116089347634947187778906528008004756692571666922964122566174582776707332452371001272163776841229318324903125740713574141005124561965913888899753461735347970011693256316751660678950830027510255804846105583465055446615090444309583050775808509297040039680057435342253926566240898195863631588888936364129920059308455669454034010391478238784189888594672336242763795138176353222845524644040094258962433613354036104643881925238489224010194193088911666165584229424668165441688927790460608264864204237717002054744337988941974661214699689706521543006262604535890998125752275942608772174376107314217749233048217904944409836238235772306749874396760463376480215133461333478395682746608242585133953883882226786118030184028136755970045385534758453247");

    public BigInteger generateSharedKey(BigInteger privateKey, BigInteger anotherPublicKey){
        BigInteger sharedKey = anotherPublicKey.modPow(privateKey, p);

        return sharedKey;
    }

    public BigInteger generatePrivateKey(){
        SecureRandom random = new SecureRandom();

        byte[] randomBytes = new byte[8];
        random.nextBytes(randomBytes);

        BigInteger result = new BigInteger(randomBytes);

        return result;
    }

    public BigInteger generatePublicKey(BigInteger privateKey){
        BigInteger result = new BigInteger("2");

        result = result.modPow(privateKey, p);

        return result;
    }
}
